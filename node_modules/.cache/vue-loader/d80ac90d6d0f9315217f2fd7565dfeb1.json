{"remainingRequest":"C:\\Users\\Robertico\\Desktop\\Vuecrudapp-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Robertico\\Desktop\\Vuecrudapp-master\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"C:\\Users\\Robertico\\Desktop\\Vuecrudapp-master\\src\\views\\Home.vue","mtime":1631826430876},{"path":"C:\\Users\\Robertico\\Desktop\\Vuecrudapp-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Robertico\\Desktop\\Vuecrudapp-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Robertico\\Desktop\\Vuecrudapp-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Robertico\\Desktop\\Vuecrudapp-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImhvbWUiPgogICAKPGRpdiBjbGFzcz0idWkgaW52ZXJ0ZWQgc2VnbWVudCBuYXZiYXIiPgogICAgPGRpdiBjbGFzcz0idWkgY2VudGVyIGFsaWduZWQgY29udGFpbmVyIj4KICAgICAgPGRpdiBjbGFzcz0idWkgbGFyZ2Ugc2Vjb25kYXJ5IGludmVydGVkIHBvaW50aW5nIG1lbnUgY29tcGFjdCI+CiAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvdGFza3MiIGV4YWN0IGNsYXNzPSJpdGVtIj4KICAgICAgICAgPGkgY2xhc3M9InRhc2tzIGljb24iPjwvaT4gVEVTVAogICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvdGFza3MvbmV3IiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICA8aSBjbGFzcz0icGx1cyBjaXJjbGUgaWNvbiI+PC9pPiBORVcKICAgICAgICA8L3JvdXRlci1saW5rPgogICAgCiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CgoKICAgIDxkaXYgY2xhc3M9InVpIHRleHQgY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InVpIG9uZSBjb2x1bW4gZ3JpZCI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbHVtbiI+CiAgICAgICAgPHJvdXRlci12aWV3IC8+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+IAoKCiAgPGJvZHkgaWQ9InBhZ2UtdG9wIj4KICAgICAgPCEtLSBOYXZpZ2F0aW9uLS0+CiAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZXhwYW5kLWxnIGJnLXNlY29uZGFyeSB0ZXh0LXVwcGVyY2FzZSBmaXhlZC10b3AiIGlkPSJtYWluTmF2Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iI3BhZ2UtdG9wIj5TdGFydCBCb290c3RyYXA8L2E+CiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibmF2YmFyLXRvZ2dsZXIgdGV4dC11cHBlcmNhc2UgZm9udC13ZWlnaHQtYm9sZCBiZy1wcmltYXJ5IHRleHQtd2hpdGUgcm91bmRlZCIgdHlwZT0iYnV0dG9uIiBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtYnMtdGFyZ2V0PSIjbmF2YmFyUmVzcG9uc2l2ZSIgYXJpYS1jb250cm9scz0ibmF2YmFyUmVzcG9uc2l2ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtbGFiZWw9IlRvZ2dsZSBuYXZpZ2F0aW9uIj4KICAgICAgICAgICAgICAgICAgTWVudQogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWJhcnMiPjwvaT4KICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2UiIGlkPSJuYXZiYXJSZXNwb25zaXZlIj4KICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXZiYXItbmF2IG1zLWF1dG8iPgogICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBteC0wIG14LWxnLTEiPjxhIGNsYXNzPSJuYXYtbGluayBweS0zIHB4LTAgcHgtbGctMyByb3VuZGVkIiBocmVmPSIjcG9ydGZvbGlvIj5Qb3J0Zm9saW88L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gbXgtMCBteC1sZy0xIj48YSBjbGFzcz0ibmF2LWxpbmsgcHktMyBweC0wIHB4LWxnLTMgcm91bmRlZCIgaHJlZj0iI2Fib3V0Ij5BYm91dDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBteC0wIG14LWxnLTEiPjxhIGNsYXNzPSJuYXYtbGluayBweS0zIHB4LTAgcHgtbGctMyByb3VuZGVkIiBocmVmPSIjY29udGFjdCI+Q29udGFjdDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBteC0wIG14LWxnLTEiPjxhIGNsYXNzPSJuYXYtbGluayBweS0zIHB4LTAgcHgtbGctMyByb3VuZGVkIiAgdi1vbjpjbGljaz0ic2FsdWRhciIgdGFyZ2V0PSJfYmxhbmsiID5FamVtcGxvIENSVUQgQmljaTwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgIDwvbmF2PgogICAgICA8IS0tIE1hc3RoZWFkLS0+CiAgICAgIDxoZWFkZXIgY2xhc3M9Im1hc3RoZWFkIGJnLXByaW1hcnkgdGV4dC13aGl0ZSB0ZXh0LWNlbnRlciI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBmbGV4LWNvbHVtbiI+CiAgICAgICAgICAgICAgPCEtLSBNYXN0aGVhZCBBdmF0YXIgSW1hZ2UtLT4KICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJtYXN0aGVhZC1hdmF0YXIgbWItNSIgc3JjPSJAL2Fzc2V0cy9pbWcvYXZhdGFhYXJzLnN2ZyIgYWx0PSIuLi4iIC8+CiAgICAgICAgICAgICAgPCEtLSBNYXN0aGVhZCBIZWFkaW5nLS0+CiAgICAgICAgICAgICAgPGgxIGNsYXNzPSJtYXN0aGVhZC1oZWFkaW5nIHRleHQtdXBwZXJjYXNlIG1iLTAiPlN0YXJ0IEJvb3RzdHJhcDwvaDE+CiAgICAgICAgICAgICAgPCEtLSBJY29uIERpdmlkZXItLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbSBkaXZpZGVyLWxpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2aWRlci1jdXN0b20tbGluZSI+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWljb24iPjxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbS1saW5lIj48L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tIE1hc3RoZWFkIFN1YmhlYWRpbmctLT4KICAgICAgICAgICAgICA8cCBjbGFzcz0ibWFzdGhlYWQtc3ViaGVhZGluZyBmb250LXdlaWdodC1saWdodCBtYi0wIj5HcmFwaGljIEFydGlzdCAtIFdlYiBEZXNpZ25lciAtIElsbHVzdHJhdG9yPC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgIDwvaGVhZGVyPgogICAgICA8IS0tIFBvcnRmb2xpbyBTZWN0aW9uLS0+CiAgICAgIDxzZWN0aW9uIGNsYXNzPSJwYWdlLXNlY3Rpb24gcG9ydGZvbGlvIiBpZD0icG9ydGZvbGlvIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgPCEtLSBQb3J0Zm9saW8gU2VjdGlvbiBIZWFkaW5nLS0+CiAgICAgICAgICAgICAgPGgyIGNsYXNzPSJwYWdlLXNlY3Rpb24taGVhZGluZyB0ZXh0LWNlbnRlciB0ZXh0LXVwcGVyY2FzZSB0ZXh0LXNlY29uZGFyeSBtYi0wIj5Qb3J0Zm9saW88L2gyPgogICAgICAgICAgICAgIDwhLS0gSWNvbiBEaXZpZGVyLS0+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2aWRlci1jdXN0b20iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbS1saW5lIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2aWRlci1jdXN0b20taWNvbiI+PGkgY2xhc3M9ImZhcyBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWxpbmUiPjwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS0gUG9ydGZvbGlvIEdyaWQgSXRlbXMtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDwhLS0gUG9ydGZvbGlvIEl0ZW0gMS0tPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBjb2wtbGctNCBtYi01Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcnRmb2xpby1pdGVtIG14LWF1dG8iIGRhdGEtYnMtdG9nZ2xlPSJtb2RhbCIgZGF0YS1icy10YXJnZXQ9IiNwb3J0Zm9saW9Nb2RhbDEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcnRmb2xpby1pdGVtLWNhcHRpb24gZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGgtMTAwIHctMTAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9ydGZvbGlvLWl0ZW0tY2FwdGlvbi1jb250ZW50IHRleHQtY2VudGVyIHRleHQtd2hpdGUiPjxpIGNsYXNzPSJmYXMgZmEtcGx1cyBmYS0zeCI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1mbHVpZCIgc3JjPSJAL2Fzc2V0cy9pbWcvcG9ydGZvbGlvL2NhYmluLnBuZyIgYWx0PSIuLi4iIC8+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS0gUG9ydGZvbGlvIEl0ZW0gMi0tPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBjb2wtbGctNCBtYi01Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcnRmb2xpby1pdGVtIG14LWF1dG8iIGRhdGEtYnMtdG9nZ2xlPSJtb2RhbCIgZGF0YS1icy10YXJnZXQ9IiNwb3J0Zm9saW9Nb2RhbDIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcnRmb2xpby1pdGVtLWNhcHRpb24gZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGgtMTAwIHctMTAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9ydGZvbGlvLWl0ZW0tY2FwdGlvbi1jb250ZW50IHRleHQtY2VudGVyIHRleHQtd2hpdGUiPjxpIGNsYXNzPSJmYXMgZmEtcGx1cyBmYS0zeCI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1mbHVpZCIgc3JjPSJAL2Fzc2V0cy9pbWcvcG9ydGZvbGlvL2Nha2UucG5nIiBhbHQ9Ii4uLiIgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLSBQb3J0Zm9saW8gSXRlbSAzLS0+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGNvbC1sZy00IG1iLTUiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9ydGZvbGlvLWl0ZW0gbXgtYXV0byIgZGF0YS1icy10b2dnbGU9Im1vZGFsIiBkYXRhLWJzLXRhcmdldD0iI3BvcnRmb2xpb01vZGFsMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9ydGZvbGlvLWl0ZW0tY2FwdGlvbiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1jZW50ZXIgaC0xMDAgdy0xMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3J0Zm9saW8taXRlbS1jYXB0aW9uLWNvbnRlbnQgdGV4dC1jZW50ZXIgdGV4dC13aGl0ZSI+PGkgY2xhc3M9ImZhcyBmYS1wbHVzIGZhLTN4Ij48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nLWZsdWlkIiBzcmM9IkAvYXNzZXRzL2ltZy9wb3J0Zm9saW8vY2lyY3VzLnBuZyIgYWx0PSIuLi4iIC8+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS0gUG9ydGZvbGlvIEl0ZW0gNC0tPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBjb2wtbGctNCBtYi01IG1iLWxnLTAiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9ydGZvbGlvLWl0ZW0gbXgtYXV0byIgZGF0YS1icy10b2dnbGU9Im1vZGFsIiBkYXRhLWJzLXRhcmdldD0iI3BvcnRmb2xpb01vZGFsNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9ydGZvbGlvLWl0ZW0tY2FwdGlvbiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1jZW50ZXIgaC0xMDAgdy0xMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3J0Zm9saW8taXRlbS1jYXB0aW9uLWNvbnRlbnQgdGV4dC1jZW50ZXIgdGV4dC13aGl0ZSI+PGkgY2xhc3M9ImZhcyBmYS1wbHVzIGZhLTN4Ij48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nLWZsdWlkIiBzcmM9IkAvYXNzZXRzL2ltZy9wb3J0Zm9saW8vZ2FtZS5wbmciIGFsdD0iLi4uIiAvPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tIFBvcnRmb2xpbyBJdGVtIDUtLT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgY29sLWxnLTQgbWItNSBtYi1tZC0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcnRmb2xpby1pdGVtIG14LWF1dG8iIGRhdGEtYnMtdG9nZ2xlPSJtb2RhbCIgZGF0YS1icy10YXJnZXQ9IiNwb3J0Zm9saW9Nb2RhbDUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcnRmb2xpby1pdGVtLWNhcHRpb24gZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGgtMTAwIHctMTAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9ydGZvbGlvLWl0ZW0tY2FwdGlvbi1jb250ZW50IHRleHQtY2VudGVyIHRleHQtd2hpdGUiPjxpIGNsYXNzPSJmYXMgZmEtcGx1cyBmYS0zeCI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1mbHVpZCIgc3JjPSJAL2Fzc2V0cy9pbWcvcG9ydGZvbGlvL3NhZmUucG5nIiBhbHQ9Ii4uLiIgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLSBQb3J0Zm9saW8gSXRlbSA2LS0+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGNvbC1sZy00Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcnRmb2xpby1pdGVtIG14LWF1dG8iIGRhdGEtYnMtdG9nZ2xlPSJtb2RhbCIgZGF0YS1icy10YXJnZXQ9IiNwb3J0Zm9saW9Nb2RhbDYiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcnRmb2xpby1pdGVtLWNhcHRpb24gZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGgtMTAwIHctMTAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9ydGZvbGlvLWl0ZW0tY2FwdGlvbi1jb250ZW50IHRleHQtY2VudGVyIHRleHQtd2hpdGUiPjxpIGNsYXNzPSJmYXMgZmEtcGx1cyBmYS0zeCI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1mbHVpZCIgc3JjPSJAL2Fzc2V0cy9pbWcvcG9ydGZvbGlvL3N1Ym1hcmluZS5wbmciIGFsdD0iLi4uIiAvPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgIDwvc2VjdGlvbj4KICAgICAKICAgICAgPHNlY3Rpb24gY2xhc3M9InBhZ2Utc2VjdGlvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgbWItMCIgaWQ9ImFib3V0Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAKICAgICAgICAgICAgICA8aDIgY2xhc3M9InBhZ2Utc2VjdGlvbi1oZWFkaW5nIHRleHQtY2VudGVyIHRleHQtdXBwZXJjYXNlIHRleHQtd2hpdGUiPkFib3V0PC9oMj4KICAgICAgICAgICAKICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbSBkaXZpZGVyLWxpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2aWRlci1jdXN0b20tbGluZSI+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWljb24iPjxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbS1saW5lIj48L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgIAogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IG1zLWF1dG8iPjxwIGNsYXNzPSJsZWFkIj5GcmVlbGFuY2VyIGlzIGEgZnJlZSBib290c3RyYXAgdGhlbWUgY3JlYXRlZCBieSBTdGFydCBCb290c3RyYXAuIFRoZSBkb3dubG9hZCBpbmNsdWRlcyB0aGUgY29tcGxldGUgc291cmNlIGZpbGVzIGluY2x1ZGluZyBIVE1MLCBDU1MsIGFuZCBKYXZhU2NyaXB0IGFzIHdlbGwgYXMgb3B0aW9uYWwgU0FTUyBzdHlsZXNoZWV0cyBmb3IgZWFzeSBjdXN0b21pemF0aW9uLjwvcD48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgbWUtYXV0byI+PHAgY2xhc3M9ImxlYWQiPllvdSBjYW4gY3JlYXRlIHlvdXIgb3duIGN1c3RvbSBhdmF0YXIgZm9yIHRoZSBtYXN0aGVhZCwgY2hhbmdlIHRoZSBpY29uIGluIHRoZSBkaXZpZGVycywgYW5kIGFkZCB5b3VyIGVtYWlsIGFkZHJlc3MgdG8gdGhlIGNvbnRhY3QgZm9ybSB0byBtYWtlIGl0IGZ1bGx5IGZ1bmN0aW9uYWwhPC9wPjwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgbXQtNCI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXhsIGJ0bi1vdXRsaW5lLWxpZ2h0IiBocmVmPSJodHRwczovL3N0YXJ0Ym9vdHN0cmFwLmNvbS90aGVtZS9mcmVlbGFuY2VyLyI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWRvd25sb2FkIG1lLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgIEZyZWUgRG93bmxvYWQhCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICA8L3NlY3Rpb24+CiAgICAKICAgICAgPHNlY3Rpb24gY2xhc3M9InBhZ2Utc2VjdGlvbiIgaWQ9ImNvbnRhY3QiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGgyIGNsYXNzPSJwYWdlLXNlY3Rpb24taGVhZGluZyB0ZXh0LWNlbnRlciB0ZXh0LXVwcGVyY2FzZSB0ZXh0LXNlY29uZGFyeSBtYi0wIj5Db250YWN0IE1lPC9oMj4KICAgICAgICAgIAogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2aWRlci1jdXN0b20tbGluZSI+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWljb24iPjxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbS1saW5lIj48L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIAogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTggY29sLXhsLTciPgogICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9ImNvbnRhY3RGb3JtIiBkYXRhLXNiLWZvcm0tYXBpLXRva2VuPSJBUElfVE9LRU4iPgogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZmxvYXRpbmcgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0ibmFtZSIgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9IkVudGVyIHlvdXIgbmFtZS4uLiIgZGF0YS1zYi12YWxpZGF0aW9ucz0icmVxdWlyZWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im5hbWUiPkZ1bGwgbmFtZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImludmFsaWQtZmVlZGJhY2siIGRhdGEtc2ItZmVlZGJhY2s9Im5hbWU6cmVxdWlyZWQiPkEgbmFtZSBpcyByZXF1aXJlZC48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWZsb2F0aW5nIG1iLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9ImVtYWlsIiB0eXBlPSJlbWFpbCIgcGxhY2Vob2xkZXI9Im5hbWVAZXhhbXBsZS5jb20iIGRhdGEtc2ItdmFsaWRhdGlvbnM9InJlcXVpcmVkLGVtYWlsIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJlbWFpbCI+RW1haWwgYWRkcmVzczwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImludmFsaWQtZmVlZGJhY2siIGRhdGEtc2ItZmVlZGJhY2s9ImVtYWlsOnJlcXVpcmVkIj5BbiBlbWFpbCBpcyByZXF1aXJlZC48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW52YWxpZC1mZWVkYmFjayIgZGF0YS1zYi1mZWVkYmFjaz0iZW1haWw6ZW1haWwiPkVtYWlsIGlzIG5vdCB2YWxpZC48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1mbG9hdGluZyBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJwaG9uZSIgdHlwZT0idGVsIiBwbGFjZWhvbGRlcj0iKDEyMykgNDU2LTc4OTAiIGRhdGEtc2ItdmFsaWRhdGlvbnM9InJlcXVpcmVkIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwaG9uZSI+UGhvbmUgbnVtYmVyPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW52YWxpZC1mZWVkYmFjayIgZGF0YS1zYi1mZWVkYmFjaz0icGhvbmU6cmVxdWlyZWQiPkEgcGhvbmUgbnVtYmVyIGlzIHJlcXVpcmVkLjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1mbG9hdGluZyBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJtZXNzYWdlIiB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iRW50ZXIgeW91ciBtZXNzYWdlIGhlcmUuLi4iIHN0eWxlPSJoZWlnaHQ6IDEwcmVtIiBkYXRhLXNiLXZhbGlkYXRpb25zPSJyZXF1aXJlZCI+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibWVzc2FnZSI+TWVzc2FnZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImludmFsaWQtZmVlZGJhY2siIGRhdGEtc2ItZmVlZGJhY2s9Im1lc3NhZ2U6cmVxdWlyZWQiPkEgbWVzc2FnZSBpcyByZXF1aXJlZC48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCgoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1ub25lIiBpZD0ic3VibWl0U3VjY2Vzc01lc3NhZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZ3LWJvbGRlciI+Rm9ybSBzdWJtaXNzaW9uIHN1Y2Nlc3NmdWwhPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUbyBhY3RpdmF0ZSB0aGlzIGZvcm0sIHNpZ24gdXAgYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9zdGFydGJvb3RzdHJhcC5jb20vc29sdXRpb24vY29udGFjdC1mb3JtcyI+aHR0cHM6Ly9zdGFydGJvb3RzdHJhcC5jb20vc29sdXRpb24vY29udGFjdC1mb3JtczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBTdWJtaXQgZXJyb3IgbWVzc2FnZS0tPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFRoaXMgaXMgd2hhdCB5b3VyIHVzZXJzIHdpbGwgc2VlIHdoZW4gdGhlcmUgaXMtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIGFuIGVycm9yIHN1Ym1pdHRpbmcgdGhlIGZvcm0tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLW5vbmUiIGlkPSJzdWJtaXRFcnJvck1lc3NhZ2UiPjxkaXYgY2xhc3M9InRleHQtY2VudGVyIHRleHQtZGFuZ2VyIG1iLTMiPkVycm9yIHNlbmRpbmcgbWVzc2FnZSE8L2Rpdj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFN1Ym1pdCBCdXR0b24tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLXhsIGRpc2FibGVkIiBpZD0ic3VibWl0QnV0dG9uIiB0eXBlPSJzdWJtaXQiPlNlbmQ8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgPC9zZWN0aW9uPgogICAgICA8IS0tIEZvb3Rlci0tPgogICAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIgdGV4dC1jZW50ZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICA8IS0tIEZvb3RlciBMb2NhdGlvbi0tPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBtYi01IG1iLWxnLTAiPgogICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBtYi00Ij5Mb2NhdGlvbjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibGVhZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAyMjE1IEpvaG4gRGFuaWVsIERyaXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xhcmssIE1PIDY1MjQzCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tIEZvb3RlciBTb2NpYWwgSWNvbnMtLT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgbWItNSBtYi1sZy0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0idGV4dC11cHBlcmNhc2UgbWItNCI+QXJvdW5kIHRoZSBXZWI8L2g0PgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1saWdodCBidG4tc29jaWFsIG14LTEiIGhyZWY9IiMhIj48aSBjbGFzcz0iZmFiIGZhLWZ3IGZhLWZhY2Vib29rLWYiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IGJ0bi1zb2NpYWwgbXgtMSIgaHJlZj0iIyEiPjxpIGNsYXNzPSJmYWIgZmEtZncgZmEtdHdpdHRlciI+PC9pPjwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtbGlnaHQgYnRuLXNvY2lhbCBteC0xIiBocmVmPSIjISI+PGkgY2xhc3M9ImZhYiBmYS1mdyBmYS1saW5rZWRpbi1pbiI+PC9pPjwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtbGlnaHQgYnRuLXNvY2lhbCBteC0xIiBocmVmPSIjISI+PGkgY2xhc3M9ImZhYiBmYS1mdyBmYS1kcmliYmJsZSI+PC9pPjwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS0gRm9vdGVyIEFib3V0IFRleHQtLT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBtYi00Ij5BYm91dCBGcmVlbGFuY2VyPC9oND4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJsZWFkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIEZyZWVsYW5jZSBpcyBhIGZyZWUgdG8gdXNlLCBNSVQgbGljZW5zZWQgQm9vdHN0cmFwIHRoZW1lIGNyZWF0ZWQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vc3RhcnRib290c3RyYXAuY29tIj5TdGFydCBCb290c3RyYXA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgLgogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICA8L2Zvb3Rlcj4KICAgICAgPCEtLSBDb3B5cmlnaHQgU2VjdGlvbi0tPgogICAgICA8ZGl2IGNsYXNzPSJjb3B5cmlnaHQgcHktNCB0ZXh0LWNlbnRlciB0ZXh0LXdoaXRlIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+PHNtYWxsPkNvcHlyaWdodCAmY29weTsgWW91ciBXZWJzaXRlIDIwMjE8L3NtYWxsPjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPCEtLSBQb3J0Zm9saW8gTW9kYWxzLS0+CiAgICAgIDwhLS0gUG9ydGZvbGlvIE1vZGFsIDEtLT4KICAgICAgPGRpdiBjbGFzcz0icG9ydGZvbGlvLW1vZGFsIG1vZGFsIGZhZGUiIGlkPSJwb3J0Zm9saW9Nb2RhbDEiIHRhYmluZGV4PSItMSIgYXJpYS1sYWJlbGxlZGJ5PSJwb3J0Zm9saW9Nb2RhbDEiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC14bCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciBib3JkZXItMCI+PGJ1dHRvbiBjbGFzcz0iYnRuLWNsb3NlIiB0eXBlPSJidXR0b24iIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48L2J1dHRvbj48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSB0ZXh0LWNlbnRlciBwYi01Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBvcnRmb2xpbyBNb2RhbCAtIFRpdGxlLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InBvcnRmb2xpby1tb2RhbC10aXRsZSB0ZXh0LXNlY29uZGFyeSB0ZXh0LXVwcGVyY2FzZSBtYi0wIj5Mb2cgQ2FiaW48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBJY29uIERpdmlkZXItLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbS1saW5lIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbS1pY29uIj48aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbS1saW5lIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQb3J0Zm9saW8gTW9kYWwgLSBJbWFnZS0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nLWZsdWlkIHJvdW5kZWQgbWItNSIgc3JjPSJAL2Fzc2V0cy9pbWcvcG9ydGZvbGlvL2NhYmluLnBuZyIgYWx0PSIuLi4iIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBvcnRmb2xpbyBNb2RhbCAtIFRleHQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi00Ij5Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gTW9sbGl0aWEgbmVxdWUgYXNzdW1lbmRhIGlwc2FtIG5paGlsLCBtb2xlc3RpYXMgbWFnbmFtLCByZWN1c2FuZGFlIHF1b3MgcXVpcyBpbnZlbnRvcmUgcXVpc3F1YW0gdmVsaXQgYXNwZXJpb3Jlcywgdml0YWU/IFJlcHJlaGVuZGVyaXQgc29sdXRhLCBlb3MgcXVvZCBjb25zZXF1dW50dXIgaXRhcXVlLiBOYW0uPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBocmVmPSIjISIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS10aW1lcyBmYS1mdyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlIFdpbmRvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8IS0tIFBvcnRmb2xpbyBNb2RhbCAyLS0+CiAgICAgIDxkaXYgY2xhc3M9InBvcnRmb2xpby1tb2RhbCBtb2RhbCBmYWRlIiBpZD0icG9ydGZvbGlvTW9kYWwyIiB0YWJpbmRleD0iLTEiIGFyaWEtbGFiZWxsZWRieT0icG9ydGZvbGlvTW9kYWwyIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwteGwiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIgYm9yZGVyLTAiPjxidXR0b24gY2xhc3M9ImJ0bi1jbG9zZSIgdHlwZT0iYnV0dG9uIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkgdGV4dC1jZW50ZXIgcGItNSI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQb3J0Zm9saW8gTW9kYWwgLSBUaXRsZS0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJwb3J0Zm9saW8tbW9kYWwtdGl0bGUgdGV4dC1zZWNvbmRhcnkgdGV4dC11cHBlcmNhc2UgbWItMCI+VGFzdHkgQ2FrZTwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEljb24gRGl2aWRlci0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2aWRlci1jdXN0b20iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWxpbmUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWljb24iPjxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWxpbmUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBvcnRmb2xpbyBNb2RhbCAtIEltYWdlLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctZmx1aWQgcm91bmRlZCBtYi01IiBzcmM9ImFzc2V0cy9pbWcvcG9ydGZvbGlvL2Nha2UucG5nIiBhbHQ9Ii4uLiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUG9ydGZvbGlvIE1vZGFsIC0gVGV4dC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTQiPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBNb2xsaXRpYSBuZXF1ZSBhc3N1bWVuZGEgaXBzYW0gbmloaWwsIG1vbGVzdGlhcyBtYWduYW0sIHJlY3VzYW5kYWUgcXVvcyBxdWlzIGludmVudG9yZSBxdWlzcXVhbSB2ZWxpdCBhc3BlcmlvcmVzLCB2aXRhZT8gUmVwcmVoZW5kZXJpdCBzb2x1dGEsIGVvcyBxdW9kIGNvbnNlcXV1bnR1ciBpdGFxdWUuIE5hbS48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGhyZWY9IiMhIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXRpbWVzIGZhLWZ3Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2UgV2luZG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDwhLS0gUG9ydGZvbGlvIE1vZGFsIDMtLT4KICAgICAgPGRpdiBjbGFzcz0icG9ydGZvbGlvLW1vZGFsIG1vZGFsIGZhZGUiIGlkPSJwb3J0Zm9saW9Nb2RhbDMiIHRhYmluZGV4PSItMSIgYXJpYS1sYWJlbGxlZGJ5PSJwb3J0Zm9saW9Nb2RhbDMiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC14bCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciBib3JkZXItMCI+PGJ1dHRvbiBjbGFzcz0iYnRuLWNsb3NlIiB0eXBlPSJidXR0b24iIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48L2J1dHRvbj48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSB0ZXh0LWNlbnRlciBwYi01Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBvcnRmb2xpbyBNb2RhbCAtIFRpdGxlLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InBvcnRmb2xpby1tb2RhbC10aXRsZSB0ZXh0LXNlY29uZGFyeSB0ZXh0LXVwcGVyY2FzZSBtYi0wIj5DaXJjdXMgVGVudDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEljb24gRGl2aWRlci0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2aWRlci1jdXN0b20iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWxpbmUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWljb24iPjxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWxpbmUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBvcnRmb2xpbyBNb2RhbCAtIEltYWdlLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctZmx1aWQgcm91bmRlZCBtYi01IiBzcmM9ImFzc2V0cy9pbWcvcG9ydGZvbGlvL2NpcmN1cy5wbmciIGFsdD0iLi4uIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQb3J0Zm9saW8gTW9kYWwgLSBUZXh0LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItNCI+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIE1vbGxpdGlhIG5lcXVlIGFzc3VtZW5kYSBpcHNhbSBuaWhpbCwgbW9sZXN0aWFzIG1hZ25hbSwgcmVjdXNhbmRhZSBxdW9zIHF1aXMgaW52ZW50b3JlIHF1aXNxdWFtIHZlbGl0IGFzcGVyaW9yZXMsIHZpdGFlPyBSZXByZWhlbmRlcml0IHNvbHV0YSwgZW9zIHF1b2QgY29uc2VxdXVudHVyIGl0YXF1ZS4gTmFtLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgaHJlZj0iIyEiIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtdGltZXMgZmEtZnciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBXaW5kb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPCEtLSBQb3J0Zm9saW8gTW9kYWwgNC0tPgogICAgICA8ZGl2IGNsYXNzPSJwb3J0Zm9saW8tbW9kYWwgbW9kYWwgZmFkZSIgaWQ9InBvcnRmb2xpb01vZGFsNCIgdGFiaW5kZXg9Ii0xIiBhcmlhLWxhYmVsbGVkYnk9InBvcnRmb2xpb01vZGFsNCIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLXhsIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIGJvcmRlci0wIj48YnV0dG9uIGNsYXNzPSJidG4tY2xvc2UiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjwvYnV0dG9uPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IHRleHQtY2VudGVyIHBiLTUiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUG9ydGZvbGlvIE1vZGFsIC0gVGl0bGUtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0icG9ydGZvbGlvLW1vZGFsLXRpdGxlIHRleHQtc2Vjb25kYXJ5IHRleHQtdXBwZXJjYXNlIG1iLTAiPkNvbnRyb2xsZXI8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBJY29uIERpdmlkZXItLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbS1saW5lIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbS1pY29uIj48aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLWN1c3RvbS1saW5lIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQb3J0Zm9saW8gTW9kYWwgLSBJbWFnZS0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nLWZsdWlkIHJvdW5kZWQgbWItNSIgc3JjPSJAL2Fzc2V0cy9pbWcvcG9ydGZvbGlvL2dhbWUucG5nIiBhbHQ9Ii4uLiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUG9ydGZvbGlvIE1vZGFsIC0gVGV4dC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTQiPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBNb2xsaXRpYSBuZXF1ZSBhc3N1bWVuZGEgaXBzYW0gbmloaWwsIG1vbGVzdGlhcyBtYWduYW0sIHJlY3VzYW5kYWUgcXVvcyBxdWlzIGludmVudG9yZSBxdWlzcXVhbSB2ZWxpdCBhc3BlcmlvcmVzLCB2aXRhZT8gUmVwcmVoZW5kZXJpdCBzb2x1dGEsIGVvcyBxdW9kIGNvbnNlcXV1bnR1ciBpdGFxdWUuIE5hbS48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGhyZWY9IiMhIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXRpbWVzIGZhLWZ3Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2UgV2luZG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDwhLS0gUG9ydGZvbGlvIE1vZGFsIDUtLT4KICAgICAgPGRpdiBjbGFzcz0icG9ydGZvbGlvLW1vZGFsIG1vZGFsIGZhZGUiIGlkPSJwb3J0Zm9saW9Nb2RhbDUiIHRhYmluZGV4PSItMSIgYXJpYS1sYWJlbGxlZGJ5PSJwb3J0Zm9saW9Nb2RhbDUiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC14bCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciBib3JkZXItMCI+PGJ1dHRvbiBjbGFzcz0iYnRuLWNsb3NlIiB0eXBlPSJidXR0b24iIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48L2J1dHRvbj48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSB0ZXh0LWNlbnRlciBwYi01Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBvcnRmb2xpbyBNb2RhbCAtIFRpdGxlLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InBvcnRmb2xpby1tb2RhbC10aXRsZSB0ZXh0LXNlY29uZGFyeSB0ZXh0LXVwcGVyY2FzZSBtYi0wIj5Mb2NrZWQgU2FmZTwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEljb24gRGl2aWRlci0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2aWRlci1jdXN0b20iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWxpbmUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWljb24iPjxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWxpbmUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBvcnRmb2xpbyBNb2RhbCAtIEltYWdlLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctZmx1aWQgcm91bmRlZCBtYi01IiBzcmM9IkAvYXNzZXRzL2ltZy9wb3J0Zm9saW8vc2FmZS5wbmciIGFsdD0iLi4uIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQb3J0Zm9saW8gTW9kYWwgLSBUZXh0LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItNCI+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIE1vbGxpdGlhIG5lcXVlIGFzc3VtZW5kYSBpcHNhbSBuaWhpbCwgbW9sZXN0aWFzIG1hZ25hbSwgcmVjdXNhbmRhZSBxdW9zIHF1aXMgaW52ZW50b3JlIHF1aXNxdWFtIHZlbGl0IGFzcGVyaW9yZXMsIHZpdGFlPyBSZXByZWhlbmRlcml0IHNvbHV0YSwgZW9zIHF1b2QgY29uc2VxdXVudHVyIGl0YXF1ZS4gTmFtLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgaHJlZj0iIyEiIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtdGltZXMgZmEtZnciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBXaW5kb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPCEtLSBQb3J0Zm9saW8gTW9kYWwgNi0tPgogICAgICA8ZGl2IGNsYXNzPSJwb3J0Zm9saW8tbW9kYWwgbW9kYWwgZmFkZSIgaWQ9InBvcnRmb2xpb01vZGFsNiIgdGFiaW5kZXg9Ii0xIiBhcmlhLWxhYmVsbGVkYnk9InBvcnRmb2xpb01vZGFsNiIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLXhsIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIGJvcmRlci0wIj48YnV0dG9uIGNsYXNzPSJidG4tY2xvc2UiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjwvYnV0dG9uPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IHRleHQtY2VudGVyIHBiLTUiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUG9ydGZvbGlvIE1vZGFsIC0gVGl0bGUtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0icG9ydGZvbGlvLW1vZGFsLXRpdGxlIHRleHQtc2Vjb25kYXJ5IHRleHQtdXBwZXJjYXNlIG1iLTAiPlN1Ym1hcmluZTwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEljb24gRGl2aWRlci0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2aWRlci1jdXN0b20iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWxpbmUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWljb24iPjxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXItY3VzdG9tLWxpbmUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBvcnRmb2xpbyBNb2RhbCAtIEltYWdlLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctZmx1aWQgcm91bmRlZCBtYi01IiBzcmM9IkAvYXNzZXRzL2ltZy9wb3J0Zm9saW8vc3VibWFyaW5lLnBuZyIgYWx0PSIuLi4iIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBvcnRmb2xpbyBNb2RhbCAtIFRleHQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi00Ij5Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gTW9sbGl0aWEgbmVxdWUgYXNzdW1lbmRhIGlwc2FtIG5paGlsLCBtb2xlc3RpYXMgbWFnbmFtLCByZWN1c2FuZGFlIHF1b3MgcXVpcyBpbnZlbnRvcmUgcXVpc3F1YW0gdmVsaXQgYXNwZXJpb3Jlcywgdml0YWU/IFJlcHJlaGVuZGVyaXQgc29sdXRhLCBlb3MgcXVvZCBjb25zZXF1dW50dXIgaXRhcXVlLiBOYW0uPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBocmVmPSIjISIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS10aW1lcyBmYS1mdyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlIFdpbmRvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgCiAgPC9ib2R5PgoKCjwvZGl2Pgo="},null]}